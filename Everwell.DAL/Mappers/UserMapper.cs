using AutoMapper;
using Everwell.DAL.Data.Entities;
using Everwell.DAL.Data.Requests.User;
using Everwell.DAL.Data.Responses.User;

namespace Everwell.DAL.Mappers.User
{
    public class UserMapper : Profile
    {
        public UserMapper()
        {
            // CreateUserRequest to User
            CreateMap<CreateUserRequest, Data.Entities.User>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // Id will be generated by the database
                .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => true)) // Default to active
                .ForMember(dest => dest.Password, opt => opt.Ignore()); // Password will be hashed later

            // User to CreateUserResponse
            CreateMap<Data.Entities.User, CreateUserResponse>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))
                .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Email))
                .ForMember(dest => dest.PhoneNumber, opt => opt.MapFrom(src => src.PhoneNumber))
                .ForMember(dest => dest.Address, opt => opt.MapFrom(src => src.Address))
                .ForMember(dest => dest.Password, opt => opt.MapFrom(src => src.Password)) // This should be hashed before saving
                .ForMember(dest => dest.Role, opt => opt.MapFrom(src => src.Role.ToString()))
                .ForMember(dest => dest.IsActive, opt => opt.MapFrom(src => src.IsActive));

            // User to GetUserResponse
            CreateMap<Data.Entities.User, GetUserResponse>()
                .ForMember(dest => dest.Id, opt => opt.MapFrom(src => src.Id))
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.Name))
                .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Email))
                .ForMember(dest => dest.PhoneNumber, opt => opt.MapFrom(src => src.PhoneNumber))
                .ForMember(dest => dest.Address, opt => opt.MapFrom(src => src.Address))
                .ForMember(dest => dest.Password, opt => opt.MapFrom(src => src.Password)) // This should be hashed before saving
                .ForMember(dest => dest.Role, opt => opt.MapFrom(src => src.Role.ToString()));

        }
    }
}
