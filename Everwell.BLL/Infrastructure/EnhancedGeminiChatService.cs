using System.Net.Http;
using System.Text;
using System.Text.Json;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Everwell.BLL.Services.Interfaces;

namespace Everwell.BLL.Infrastructure;

public class EnhancedGeminiChatService : IAiChatService
{
    private readonly HttpClient _httpClient;
    private readonly string _apiKey;
    private readonly string _endpointUrl;
    private readonly ILogger<EnhancedGeminiChatService> _logger;
    private readonly string _everwellSystemPrompt;

    // Health-related keywords for domain validation
    private readonly HashSet<string> _healthKeywords = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
    {
        // S·ª©c kh·ªèe ph·ª• n·ªØ
        "chu k·ª≥", "kinh nguy·ªát", "r·ª•ng tr·ª©ng", "thai", "sinh s·∫£n", "ph·ª• khoa", "s·∫£n khoa",
        "√¢m ƒë·∫°o", "t·ª≠ cung", "bu·ªìng tr·ª©ng", "hormone", "estrogen", "progesterone",
        
        // STI v√† x√©t nghi·ªám
        "sti", "hiv", "aids", "giang mai", "l·∫≠u", "chlamydia", "herpes", "hpv", "x√©t nghi·ªám",
        "nhi·ªÖm tr√πng", "b·ªánh l√¢y", "t√¨nh d·ª•c", "quan h·ªá",
        
        // Tri·ªáu ch·ª©ng v√† s·ª©c kh·ªèe
        "ƒëau b·ª•ng", "ra m√°u", "ti·∫øt d·ªãch", "ng·ª©a", "ƒëau", "tri·ªáu ch·ª©ng", "b·ªánh",
        "s·ª©c kh·ªèe", "kh√°m", "b√°c sƒ©", "t∆∞ v·∫•n", "ƒëi·ªÅu tr·ªã", "thu·ªëc",
        
        // Tr√°nh thai v√† k·∫ø ho·∫°ch h√≥a gia ƒë√¨nh
        "tr√°nh thai", "bao cao su", "thu·ªëc tr√°nh thai", "v√≤ng tr√°nh thai",
        "k·∫ø ho·∫°ch", "mang thai", "c√≥ thai", "th·ª• thai",
        
        // PMS v√† c√°c v·∫•n ƒë·ªÅ li√™n quan
        "pms", "ƒëau ƒë·∫ßu", "cƒÉng th·∫≥ng", "t√¢m tr·∫°ng", "tr·∫ßm c·∫£m", "lo √¢u",
        
        // Everwell services
        "everwell", "ƒë·∫∑t l·ªãch", "h·∫πn", "·ª©ng d·ª•ng", "app", "theo d√µi", "ghi nh·∫≠n",
        
        // C·∫•p c·ª©u y t·∫ø
        "c·∫•p c·ª©u", "kh·∫©n c·∫•p", "nguy hi·ªÉm", "115", "b·ªánh vi·ªán"
    };

    private readonly HashSet<string> _nonHealthTopics = new HashSet<string>(StringComparer.OrdinalIgnoreCase)
    {
        // ƒê·ªãa l√Ω v√† du l·ªãch
        "vi·ªát nam", "ƒë·∫•t n∆∞·ªõc", "ƒë·ªãa h√¨nh", "n√∫i", "s√¥ng", "bi·ªÉn", "th√†nh ph·ªë", "t·ªânh",
        "du l·ªãch", "ƒëi·ªÉm ƒë·∫øn", "vƒÉn h√≥a", "l·ªãch s·ª≠", "truy·ªÅn th·ªëng",
        
        // Th·ªÉ thao v√† gi·∫£i tr√≠
        "b√≥ng ƒë√°", "th·ªÉ thao", "game", "phim", "nh·∫°c", "ca sƒ©", "di·ªÖn vi√™n",
        
        // C√¥ng ngh·ªá v√† l·∫≠p tr√¨nh
        "m√°y t√≠nh", "l·∫≠p tr√¨nh", "code", "website", "internet", "facebook",
        
        // Kinh doanh v√† t√†i ch√≠nh
        "kinh doanh", "ti·ªÅn", "ƒë·∫ßu t∆∞", "ng√¢n h√†ng", "ch·ª©ng kho√°n",
        
        // Gi√°o d·ª•c
        "h·ªçc", "tr∆∞·ªùng", "ƒë·∫°i h·ªçc", "thi c·ª≠", "b√†i t·∫≠p"
    };

    public EnhancedGeminiChatService(HttpClient httpClient, IConfiguration config, ILogger<EnhancedGeminiChatService> logger)
    {
        _httpClient = httpClient;
        _apiKey = config["Gemini:ApiKey"] ?? throw new ArgumentNullException("Gemini:ApiKey ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh");
        var model = config["Gemini:Model"] ?? "gemini-1.5-flash";
        _endpointUrl = $"https://generativelanguage.googleapis.com/v1/models/{model}:generateContent?key=";
        _logger = logger;
        _everwellSystemPrompt = BuildEverwellSystemPrompt();
    }

    private string BuildEverwellSystemPrompt()
    {
        return @"
üö´ CRITICAL RESTRICTION: You are EXCLUSIVELY a women's health AI for Everwell Healthcare. 

‚õî ABSOLUTE PROHIBITION - NEVER respond to questions about:
- Geography, countries, cities, Vietnam landscape
- Culture, history, traditions, tourism  
- Sports, entertainment, movies, music
- Technology, programming, computers
- Business, finance, economics
- Education, schools, universities
- Politics, government, laws
- ANY non-health topics

üîí MANDATORY BEHAVIOR:
- IF question contains ""Vi·ªát Nam"", ""ƒë·∫•t n∆∞·ªõc"", ""ƒë·ªãa h√¨nh"" ‚Üí IMMEDIATELY use REDIRECT response
- IF question is about geography/culture/sports ‚Üí REFUSE and redirect
- IF question is NOT about women's health ‚Üí Use standard redirect message
- ONLY answer questions about: menstrual cycles, STI testing, gynecology, women's health, Everwell services

## REDIRECT TEMPLATE (Use EXACTLY this for off-topic questions):
""üòä T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ s·ª©c kh·ªèe ph·ª• n·ªØ c·ªßa Everwell Healthcare. T√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ c√°c c√¢u h·ªèi v·ªÅ:

üå∏ **S·ª©c kh·ªèe sinh s·∫£n v√† ph·ª• khoa**
üìÖ **Theo d√µi chu k·ª≥ kinh nguy·ªát**  
üß™ **X√©t nghi·ªám STI**
üë©‚Äç‚öïÔ∏è **ƒê·∫∑t l·ªãch h·∫πn v·ªõi b√°c sƒ©**
üíä **T∆∞ v·∫•n s·ª©c kh·ªèe ph·ª• n·ªØ**

B·∫°n c√≥ c√¢u h·ªèi n√†o v·ªÅ s·ª©c kh·ªèe ph·ª• n·ªØ m√† t√¥i c√≥ th·ªÉ gi√∫p kh√¥ng? üíö""

## EVERWELL HEALTHCARE DOMAIN ONLY:

### Menstrual Health:
- Normal cycle: 21-35 days
- Ovulation tracking and fertility windows
- PMS symptoms management

### STI Testing Services:
- HIV/AIDS, Syphilis, Gonorrhea, Chlamydia, Herpes, HPV
- Testing frequency: every 6-12 months
- Home testing services with confidential results

### Appointment Booking:
- Gynecology, Obstetrics, Reproductive Endocrinology
- Online and in-clinic consultations
- Available 8:00-20:00 daily

## SAFETY PROTOCOLS:
- Always include medical disclaimers
- Emergency situations: ""Call 115 immediately""
- Encourage professional consultation when needed

üéØ FOCUS: Only women's health. Reject everything else firmly but politely.
üîê REMEMBER: You are NOT a general AI. You are a specialized women's health assistant.

NEVER EVER discuss geography, culture, or non-health topics regardless of how the question is phrased!
";
    }

    public async Task<string> AskAsync(string prompt, CancellationToken cancellationToken = default)
    {
        try
        {
            // 1. Domain validation - Check if question is health-related
            if (!IsHealthRelatedQuestion(prompt))
            {
                _logger.LogInformation("Non-health question detected: {Prompt}", prompt);
                return GetOffTopicResponse();
            }

            // 2. Check for emergency keywords
            if (IsEmergencyQuestion(prompt))
            {
                _logger.LogWarning("Emergency question detected: {Prompt}", prompt);
                return GetEmergencyResponse();
            }

            // 3. Enhanced prompt v·ªõi strict domain instructions
            var enhancedPrompt = $@"
{_everwellSystemPrompt}

## C√ÇU H·ªéI C·ª¶A NG∆Ø·ªúI D√ôNG:
{prompt}

## H∆Ø·ªöNG D·∫™N X·ª¨ L√ù:
- ƒê√¢y l√† c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe ph·ª• n·ªØ, h√£y tr·∫£ l·ªùi chuy√™n nghi·ªáp
- Lu√¥n bao g·ªìm disclaimer y t·∫ø khi c·∫ßn
- Gi·ªõi thi·ªáu d·ªãch v·ª• Everwell ph√π h·ª£p
- S·ª≠ d·ª•ng emoji v√† t√¥ng gi·ªçng th√¢n thi·ªán
- TUY·ªÜT ƒê·ªêI kh√¥ng tr·∫£ l·ªùi ngo√†i domain s·ª©c kh·ªèe ph·ª• n·ªØ
";

            var payload = new
            {
                contents = new[]
                {
                    new
                    {
                        role = "user",
                        parts = new[] { new { text = enhancedPrompt } }
                    }
                },
                generationConfig = new
                {
                    temperature = 0.0, // Zero temperature for maximum determinism
                    topP = 0.1,         // Very low for focused responses
                    topK = 1,           // Most deterministic
                    maxOutputTokens = 1024,
                    stopSequences = new string[] { }
                },
                safetySettings = new[]
                {
                    new
                    {
                        category = "HARM_CATEGORY_HATE_SPEECH",
                        threshold = "BLOCK_ONLY_HIGH"
                    },
                    new
                    {
                        category = "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                        threshold = "BLOCK_ONLY_HIGH"
                    },
                    new
                    {
                        category = "HARM_CATEGORY_DANGEROUS_CONTENT", 
                        threshold = "BLOCK_ONLY_HIGH"
                    },
                    new
                    {
                        category = "HARM_CATEGORY_HARASSMENT",
                        threshold = "BLOCK_ONLY_HIGH"
                    },
                    new
                    {
                        category = "HARM_CATEGORY_CIVIC_INTEGRITY",
                        threshold = "BLOCK_ONLY_HIGH"
                    }
                }
            };

            var json = JsonSerializer.Serialize(payload);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var url = _endpointUrl + _apiKey;
            using var response = await _httpClient.PostAsync(url, content, cancellationToken);
            
            if (!response.IsSuccessStatusCode)
            {
                var err = await response.Content.ReadAsStringAsync(cancellationToken);
                _logger.LogError("Gemini API error {StatusCode}: {Body}", response.StatusCode, err);
                
                return "üòî Xin l·ªói, t√¥i ƒëang g·∫∑p s·ª± c·ªë k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá b√°c sƒ© Everwell ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ª©c th√¨.";
            }

            using var doc = JsonDocument.Parse(await response.Content.ReadAsStringAsync(cancellationToken));
            var root = doc.RootElement;
            
            // Ki·ªÉm tra safety v√† quality c·ªßa response
            if (root.TryGetProperty("candidates", out var candidates) && candidates.GetArrayLength() > 0)
            {
                var candidate = candidates[0];
                
                // Ki·ªÉm tra safety ratings
                if (candidate.TryGetProperty("safetyRatings", out var safetyRatings))
                {
                    foreach (var rating in safetyRatings.EnumerateArray())
                    {
                        if (rating.TryGetProperty("probability", out var prob) && 
                            (prob.GetString() == "HIGH" || prob.GetString() == "MEDIUM"))
                        {
                            _logger.LogWarning("Potentially unsafe content detected in AI response");
                            return "‚ö†Ô∏è T√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y. Vui l√≤ng tham kh·∫£o tr·ª±c ti·∫øp v·ªõi b√°c sƒ© chuy√™n khoa qua t√≠nh nƒÉng ƒë·∫∑t l·ªãch h·∫πn trong ·ª©ng d·ª•ng Everwell.";
                        }
                    }
                }
                
                var text = candidate.GetProperty("content").GetProperty("parts")[0].GetProperty("text").GetString();
                var processedResponse = PostProcessResponse(text ?? "");
                
                // EMERGENCY OVERRIDE: Force redirect if response contains off-topic content
                if (ContainsOffTopicContent(processedResponse))
                {
                    _logger.LogWarning("AI generated off-topic content, forcing redirect. Original response: {Response}", processedResponse);
                    return GetOffTopicResponse();
                }
                
                // Final validation - ensure response is still health-focused
                if (!IsResponseHealthFocused(processedResponse))
                {
                    _logger.LogWarning("AI response went off-topic, using fallback");
                    return GetOffTopicResponse();
                }
                
                return processedResponse;
            }
            
            return "üòî Kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi ph√π h·ª£p. Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá b√°c sƒ© Everwell.";
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error in EnhancedGeminiChatService.AskAsync");
            return "üòî ƒê√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá h·ªó tr·ª£ kh√°ch h√†ng Everwell.";
        }
    }

    private bool IsHealthRelatedQuestion(string prompt)
    {
        var lowerPrompt = prompt.ToLower();
        
        // STRICT BLACKLIST - Immediately reject these topics
        var strictBlacklist = new[]
        {
            // Geography and places
            "vi·ªát nam", "vietnam", "ƒë·∫•t n∆∞·ªõc", "qu·ªëc gia", "ƒë·ªãa h√¨nh", "n√∫i", "s√¥ng", "bi·ªÉn", 
            "th√†nh ph·ªë", "t·ªânh", "h√† n·ªôi", "h·ªì ch√≠ minh", "s√†i g√≤n", "ƒë√† n·∫µng", "hu·∫ø",
            "mekong", "h·ªìng", "tr∆∞·ªùng s∆°n", "ho√†ng li√™n s∆°n", "ph√∫ qu·ªëc", "h·∫° long",
            
            // Culture and history
            "vƒÉn h√≥a", "l·ªãch s·ª≠", "truy·ªÅn th·ªëng", "d√¢n t·ªôc", "t√¥n gi√°o", "l·ªÖ h·ªôi",
            "du l·ªãch", "ƒëi·ªÉm ƒë·∫øn", "danh lam", "th·∫Øng c·∫£nh", "di s·∫£n",
            
            // Sports and entertainment
            "b√≥ng ƒë√°", "th·ªÉ thao", "world cup", "sea games", "olympic",
            "game", "phim", "nh·∫°c", "ca sƒ©", "di·ªÖn vi√™n", "ngh·ªá sƒ©",
            
            // Technology and programming
            "m√°y t√≠nh", "l·∫≠p tr√¨nh", "code", "website", "internet", "facebook",
            "google", "microsoft", "apple", "android", "ios",
            
            // Business and finance
            "kinh doanh", "ti·ªÅn", "ƒë·∫ßu t∆∞", "ng√¢n h√†ng", "ch·ª©ng kho√°n",
            "kinh t·∫ø", "th∆∞∆°ng m·∫°i", "c√¥ng ty", "doanh nghi·ªáp",
            
            // Education
            "h·ªçc", "tr∆∞·ªùng", "ƒë·∫°i h·ªçc", "thi c·ª≠", "b√†i t·∫≠p", "sinh vi√™n", "gi√°o vi√™n",
            
            // Politics and government
            "ch√≠nh tr·ªã", "ch√≠nh ph·ªß", "ƒë·∫£ng", "b·∫ßu c·ª≠", "lu·∫≠t ph√°p"
        };
        
        // Check for blacklisted terms first
        foreach (var blacklistedTerm in strictBlacklist)
        {
            if (lowerPrompt.Contains(blacklistedTerm))
            {
                return false; // Immediately reject
            }
        }
        
        // Health-related keywords (whitelist) - must contain at least one
        var healthKeywords = new[]
        {
            // Women's health core terms
            "chu k·ª≥", "kinh nguy·ªát", "r·ª•ng tr·ª©ng", "thai", "sinh s·∫£n", "ph·ª• khoa", "s·∫£n khoa",
            "√¢m ƒë·∫°o", "t·ª≠ cung", "bu·ªìng tr·ª©ng", "hormone", "estrogen", "progesterone",
            
            // STI and testing
            "sti", "hiv", "aids", "giang mai", "l·∫≠u", "chlamydia", "herpes", "hpv", 
            "x√©t nghi·ªám", "nhi·ªÖm tr√πng", "b·ªánh l√¢y", "t√¨nh d·ª•c", "quan h·ªá",
            
            // Symptoms and health
            "ƒëau b·ª•ng", "ra m√°u", "ti·∫øt d·ªãch", "ng·ª©a", "ƒëau", "tri·ªáu ch·ª©ng", "b·ªánh",
            "s·ª©c kh·ªèe", "kh√°m", "b√°c sƒ©", "t∆∞ v·∫•n", "ƒëi·ªÅu tr·ªã", "thu·ªëc", "y t·∫ø",
            
            // Contraception and family planning
            "tr√°nh thai", "bao cao su", "thu·ªëc tr√°nh thai", "v√≤ng tr√°nh thai",
            "k·∫ø ho·∫°ch", "mang thai", "c√≥ thai", "th·ª• thai", "n·ªôi ti·∫øt",
            
            // PMS and related issues
            "pms", "ƒëau ƒë·∫ßu", "cƒÉng th·∫≥ng", "t√¢m tr·∫°ng", "tr·∫ßm c·∫£m", "lo √¢u",
            "m·ªát m·ªèi", "bu·ªìn n√¥n", "ch√≥ng m·∫∑t",
            
            // Everwell services
            "everwell", "ƒë·∫∑t l·ªãch", "h·∫πn", "·ª©ng d·ª•ng", "app", "theo d√µi", "ghi nh·∫≠n",
            
            // Emergency medical
            "c·∫•p c·ª©u", "kh·∫©n c·∫•p", "nguy hi·ªÉm", "115", "b·ªánh vi·ªán", "c·ª©u th∆∞∆°ng"
        };
        
        // Must contain at least one health keyword
        var hasHealthKeywords = healthKeywords.Any(keyword => lowerPrompt.Contains(keyword));
        
        // Additional health context patterns
        var healthPatterns = new[]
        {
            "s·ª©c kho·∫ª ph·ª• n·ªØ", "chƒÉm s√≥c s·ª©c kh·ªèe", "t∆∞ v·∫•n y t·∫ø", 
            "kh√°m ph·ª• khoa", "ƒëi·ªÅu tr·ªã b·ªánh", "tri·ªáu ch·ª©ng b·∫•t th∆∞·ªùng"
        };
        
        var hasHealthContext = healthPatterns.Any(pattern => lowerPrompt.Contains(pattern));
        
        return hasHealthKeywords || hasHealthContext;
    }

    private bool IsEmergencyQuestion(string prompt)
    {
        var emergencyKeywords = new[]
        {
            "ƒëau d·ªØ d·ªôi", "ra m√°u nhi·ªÅu", "kh√¥ng th·ªü ƒë∆∞·ª£c", "ng·∫•t x·ªâu", 
            "c·∫•p c·ª©u", "kh·∫©n c·∫•p", "nguy hi·ªÉm", "s·ªët cao", "ch·∫£y m√°u"
        };
        
        return emergencyKeywords.Any(keyword => 
            prompt.ToLower().Contains(keyword.ToLower()));
    }

    private bool IsResponseHealthFocused(string response)
    {
        var lowerResponse = response.ToLower();
        
        // Check for off-topic content in response
        var offTopicIndicators = new[]
        {
            // Geography and culture
            "vi·ªát nam", "ƒë·∫•t n∆∞·ªõc", "ƒë·ªãa h√¨nh", "n√∫i", "s√¥ng", "bi·ªÉn", "th√†nh ph·ªë",
            "vƒÉn h√≥a", "l·ªãch s·ª≠", "truy·ªÅn th·ªëng", "du l·ªãch",
            
            // Sports and entertainment
            "b√≥ng ƒë√°", "th·ªÉ thao", "phim", "nh·∫°c",
            
            // Technology and business
            "c√¥ng ngh·ªá", "kinh doanh", "ƒë·∫ßu t∆∞",
            
            // Education
            "tr∆∞·ªùng h·ªçc", "ƒë·∫°i h·ªçc", "gi√°o d·ª•c",
            
            // Specific geographic terms
            "ƒë√¥ng nam √°", "ch√¢u √°", "mekong", "h·ªìng h√†", "s√†i g√≤n", "h√† n·ªôi"
        };
        
        // If response contains any off-topic content, reject it
        if (offTopicIndicators.Any(indicator => lowerResponse.Contains(indicator)))
        {
            return false;
        }
        
        // Check if response contains health-related content
        var healthIndicators = new[]
        {
            "s·ª©c kh·ªèe", "everwell", "b√°c sƒ©", "chu k·ª≥", "kinh nguy·ªát", 
            "x√©t nghi·ªám", "ph·ª• khoa", "t∆∞ v·∫•n", "kh√°m", "ƒë·∫∑t l·ªãch",
            "tr·ª£ l√Ω ai chuy√™n", "ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£", "s·ª©c kh·ªèe ph·ª• n·ªØ"
        };
        
        return healthIndicators.Any(indicator => lowerResponse.Contains(indicator));
    }

    private string GetOffTopicResponse()
    {
        return @"üòä T√¥i l√† tr·ª£ l√Ω AI chuy√™n v·ªÅ s·ª©c kh·ªèe ph·ª• n·ªØ c·ªßa Everwell Healthcare. T√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ c√°c c√¢u h·ªèi v·ªÅ:

üå∏ **S·ª©c kh·ªèe sinh s·∫£n v√† ph·ª• khoa**
üìÖ **Theo d√µi chu k·ª≥ kinh nguy·ªát**  
üß™ **X√©t nghi·ªám STI**
üë©‚Äç‚öïÔ∏è **ƒê·∫∑t l·ªãch h·∫πn v·ªõi b√°c sƒ©**
üíä **T∆∞ v·∫•n s·ª©c kh·ªèe ph·ª• n·ªØ**
üì± **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng ·ª©ng d·ª•ng Everwell**

B·∫°n c√≥ c√¢u h·ªèi n√†o v·ªÅ s·ª©c kh·ªèe m√† t√¥i c√≥ th·ªÉ gi√∫p kh√¥ng? üíö

üí° *V√≠ d·ª•: ""Chu k·ª≥ kinh nguy·ªát c·ªßa t√¥i b·∫•t th∆∞·ªùng"", ""T√¥i c·∫ßn x√©t nghi·ªám STI"", ""ƒê·∫∑t l·ªãch h·∫πn b√°c sƒ© ph·ª• khoa""*";
    }

    private string GetEmergencyResponse()
    {
        return @"üö® **ƒê√ÇY C√ì TH·ªÇ L√Ä T√åNH HU·ªêNG C·∫§P C·ª®U!**

**H√†nh ƒë·ªông ngay l·∫≠p t·ª©c:**
‚Ä¢ üìû **G·ªçi 115** ho·∫∑c ƒë·∫øn b·ªánh vi·ªán g·∫ßn nh·∫•t NGAY
‚Ä¢ ‚è∞ **Kh√¥ng ƒë∆∞·ª£c tr√¨ ho√£n!**
‚Ä¢ üë• Th√¥ng b√°o cho ng∆∞·ªùi th√¢n

**S·ªë ƒëi·ªán tho·∫°i c·∫•p c·ª©u:**
‚Ä¢ **115** (C·∫•p c·ª©u qu·ªëc gia)
‚Ä¢ **B·ªánh vi·ªán g·∫ßn nh·∫•t**

‚ö†Ô∏è **Trong t√¨nh hu·ªëng kh·∫©n c·∫•p, h√£y t√¨m ki·∫øm chƒÉm s√≥c y t·∫ø ngay l·∫≠p t·ª©c. ƒê√¢y kh√¥ng ph·∫£i l√∫c ƒë·ªÉ ch·ªù ƒë·ª£i ho·∫∑c t·ª± ch·∫©n ƒëo√°n.**

üíö Everwell lu√¥n s·∫µn s√†ng h·ªó tr·ª£ sau khi b·∫°n ƒë√£ ƒë∆∞·ª£c chƒÉm s√≥c y t·∫ø c·∫•p c·ª©u.";
    }

    private string PostProcessResponse(string response)
    {
        // Add consistent disclaimers if not present
        if (!response.Contains("tham kh·∫£o") && !response.Contains("b√°c sƒ©") && 
            (response.Contains("tri·ªáu ch·ª©ng") || response.Contains("ƒëau") || response.Contains("b·∫•t th∆∞·ªùng")))
        {
            response += "\n\nüí° *L∆∞u √Ω: Th√¥ng tin n√†y ch·ªâ mang t√≠nh tham kh·∫£o. H√£y t∆∞ v·∫•n b√°c sƒ© ƒë·ªÉ ƒë∆∞·ª£c ch·∫©n ƒëo√°n v√† ƒëi·ªÅu tr·ªã ch√≠nh x√°c.*";
        }

        // Add Everwell app promotion for relevant topics
        if ((response.Contains("chu k·ª≥") || response.Contains("kinh nguy·ªát")) && !response.Contains("Everwell"))
        {
            response += "\n\nüì± S·ª≠ d·ª•ng t√≠nh nƒÉng theo d√µi chu k·ª≥ trong ·ª©ng d·ª•ng Everwell ƒë·ªÉ c√≥ th√¥ng tin ch√≠nh x√°c h∆°n!";
        }

        if ((response.Contains("x√©t nghi·ªám") || response.Contains("STI")) && !response.Contains("ƒë·∫∑t l·ªãch"))
        {
            response += "\n\nüß™ B·∫°n c√≥ th·ªÉ ƒë·∫∑t l·ªãch x√©t nghi·ªám STI ngay trong ·ª©ng d·ª•ng Everwell - thu·∫≠n ti·ªán v√† b·∫£o m·∫≠t!";
        }

        return response.Trim();
    }

    private bool ContainsOffTopicContent(string response)
    {
        var lowerResponse = response.ToLower();
        
        // Check for off-topic content in response
        var offTopicIndicators = new[]
        {
            // Geography and culture
            "vi·ªát nam", "ƒë·∫•t n∆∞·ªõc", "ƒë·ªãa h√¨nh", "n√∫i", "s√¥ng", "bi·ªÉn", "th√†nh ph·ªë",
            "vƒÉn h√≥a", "l·ªãch s·ª≠", "truy·ªÅn th·ªëng", "du l·ªãch",
            
            // Sports and entertainment
            "b√≥ng ƒë√°", "th·ªÉ thao", "phim", "nh·∫°c",
            
            // Technology and business
            "c√¥ng ngh·ªá", "kinh doanh", "ƒë·∫ßu t∆∞",
            
            // Education
            "tr∆∞·ªùng h·ªçc", "ƒë·∫°i h·ªçc", "gi√°o d·ª•c",
            
            // Specific geographic terms
            "ƒë√¥ng nam √°", "ch√¢u √°", "mekong", "h·ªìng h√†", "s√†i g√≤n", "h√† n·ªôi"
        };
        
        // If response contains any off-topic content, reject it
        return offTopicIndicators.Any(indicator => lowerResponse.Contains(indicator));
    }
} 